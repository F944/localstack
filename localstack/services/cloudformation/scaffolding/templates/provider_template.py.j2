from dataclasses import dataclass
from typing import Optional

from localstack.services.cloudformation.resource_provider import (
    OperationStatus,
    ProgressEvent,
    ResourceProvider,
    ResourceRequest,
    register_resource_provider,
)

{{ provider_properties }}


class AllProperties(Properties):
    physical_resource_id: Optional[str] = None


@register_resource_provider
class {{ resource }}Provider(ResourceProvider[AllProperties]):

    TYPE = "{{ name }}"

    def create(
        self,
        request: ResourceRequest[AllProperties],
    ) -> ProgressEvent[AllProperties]:
        """
        Create a new resource.
        """
        model = request.desired_state

        # TODO: validations

        if model.physical_resource_id is None:
            # this is the first time this callback is invoked
            # TODO: defaults
            # TODO: idempotency
            # TODO: actually create the resource
            # TODO: set model.physical_resource_id
            return ProgressEvent(status=OperationStatus.IN_PROGRESS, resource_model=model)

        # TODO: check the status of the resource
        # - if finished, update the model with all fields and return success event:
        #   return ProgressEvent(status=OperationStatus.SUCCESS, resource_model=model)
        # - else
        #   return ProgressEvent(status=OperationStatus.IN_PROGRESS, resource_model=model)

        raise NotImplementedError

    def delete(
            self,
            request: ResourceRequest[AllProperties],
    ) -> ProgressEvent[AllProperties]:
        raise NotImplementedError
