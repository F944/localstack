# LocalStack Resource Provider Scaffolding v2
from __future__ import annotations

from pathlib import Path
from typing import Optional, Type, TypedDict

import localstack.services.cloudformation.provider_utils as util
from localstack.services.cloudformation.resource_provider import (
    CloudFormationResourceProviderPlugin,
    OperationStatus,
    ProgressEvent,
    ResourceProvider,
    ResourceRequest,
)


class DynamoDBTableProperties(TypedDict):
    KeySchema: Optional[list[KeySchema] | dict]
    Arn: Optional[str]
    AttributeDefinitions: Optional[list[AttributeDefinition]]
    BillingMode: Optional[str]
    ContributorInsightsSpecification: Optional[ContributorInsightsSpecification]
    DeletionProtectionEnabled: Optional[bool]
    GlobalSecondaryIndexes: Optional[list[GlobalSecondaryIndex]]
    ImportSourceSpecification: Optional[ImportSourceSpecification]
    KinesisStreamSpecification: Optional[KinesisStreamSpecification]
    LocalSecondaryIndexes: Optional[list[LocalSecondaryIndex]]
    PointInTimeRecoverySpecification: Optional[PointInTimeRecoverySpecification]
    ProvisionedThroughput: Optional[ProvisionedThroughput]
    SSESpecification: Optional[SSESpecification]
    StreamArn: Optional[str]
    StreamSpecification: Optional[StreamSpecification]
    TableClass: Optional[str]
    TableName: Optional[str]
    Tags: Optional[list[Tag]]
    TimeToLiveSpecification: Optional[TimeToLiveSpecification]


class AttributeDefinition(TypedDict):
    AttributeName: Optional[str]
    AttributeType: Optional[str]


class KeySchema(TypedDict):
    AttributeName: Optional[str]
    KeyType: Optional[str]


class Projection(TypedDict):
    NonKeyAttributes: Optional[list[str]]
    ProjectionType: Optional[str]


class ProvisionedThroughput(TypedDict):
    ReadCapacityUnits: Optional[int]
    WriteCapacityUnits: Optional[int]


class ContributorInsightsSpecification(TypedDict):
    Enabled: Optional[bool]


class GlobalSecondaryIndex(TypedDict):
    IndexName: Optional[str]
    KeySchema: Optional[list[KeySchema]]
    Projection: Optional[Projection]
    ContributorInsightsSpecification: Optional[ContributorInsightsSpecification]
    ProvisionedThroughput: Optional[ProvisionedThroughput]


class LocalSecondaryIndex(TypedDict):
    IndexName: Optional[str]
    KeySchema: Optional[list[KeySchema]]
    Projection: Optional[Projection]


class PointInTimeRecoverySpecification(TypedDict):
    PointInTimeRecoveryEnabled: Optional[bool]


class SSESpecification(TypedDict):
    SSEEnabled: Optional[bool]
    KMSMasterKeyId: Optional[str]
    SSEType: Optional[str]


class StreamSpecification(TypedDict):
    StreamViewType: Optional[str]


class Tag(TypedDict):
    Key: Optional[str]
    Value: Optional[str]


class TimeToLiveSpecification(TypedDict):
    AttributeName: Optional[str]
    Enabled: Optional[bool]


class KinesisStreamSpecification(TypedDict):
    StreamArn: Optional[str]


class S3BucketSource(TypedDict):
    S3Bucket: Optional[str]
    S3BucketOwner: Optional[str]
    S3KeyPrefix: Optional[str]


class Csv(TypedDict):
    Delimiter: Optional[str]
    HeaderList: Optional[list[str]]


class InputFormatOptions(TypedDict):
    Csv: Optional[Csv]


class ImportSourceSpecification(TypedDict):
    InputFormat: Optional[str]
    S3BucketSource: Optional[S3BucketSource]
    InputCompressionType: Optional[str]
    InputFormatOptions: Optional[InputFormatOptions]


REPEATED_INVOCATION = "repeated_invocation"


class DynamoDBTableProvider(ResourceProvider[DynamoDBTableProperties]):

    TYPE = "AWS::DynamoDB::Table"  # Autogenerated. Don't change
    SCHEMA = util.get_schema_path(Path(__file__))  # Autogenerated. Don't change

    def create(
        self,
        request: ResourceRequest[DynamoDBTableProperties],
    ) -> ProgressEvent[DynamoDBTableProperties]:
        """
        Create a new resource.

        Primary identifier fields:
          - /properties/TableName

        Required properties:
          - KeySchema

        Create-only properties:
          - /properties/TableName
          - /properties/ImportSourceSpecification

        Read-only properties:
          - /properties/Arn
          - /properties/StreamArn

        IAM permissions required:
          - dynamodb:CreateTable
          - dynamodb:DescribeImport
          - dynamodb:DescribeTable
          - dynamodb:DescribeTimeToLive
          - dynamodb:UpdateTimeToLive
          - dynamodb:UpdateContributorInsights
          - dynamodb:UpdateContinuousBackups
          - dynamodb:DescribeContinuousBackups
          - dynamodb:DescribeContributorInsights
          - dynamodb:EnableKinesisStreamingDestination
          - dynamodb:DisableKinesisStreamingDestination
          - dynamodb:DescribeKinesisStreamingDestination
          - dynamodb:ImportTable
          - dynamodb:ListTagsOfResource
          - dynamodb:TagResource
          - dynamodb:UpdateTable
          - kinesis:DescribeStream
          - kinesis:PutRecords
          - iam:CreateServiceLinkedRole
          - kms:CreateGrant
          - kms:Decrypt
          - kms:Describe*
          - kms:Encrypt
          - kms:Get*
          - kms:List*
          - kms:RevokeGrant
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:DescribeLogGroups
          - logs:DescribeLogStreams
          - logs:PutLogEvents
          - logs:PutRetentionPolicy
          - s3:GetObject
          - s3:GetObjectMetadata
          - s3:ListBucket

        """
        model = request.desired_state

        # TODO: validations

        if not request.custom_context.get(REPEATED_INVOCATION):
            # this is the first time this callback is invoked
            # TODO: defaults
            # TODO: idempotency
            # TODO: actually create the resource
            request.custom_context[REPEATED_INVOCATION] = True
            return ProgressEvent(
                status=OperationStatus.IN_PROGRESS,
                resource_model=model,
                custom_context=request.custom_context,
            )

        # TODO: check the status of the resource
        # - if finished, update the model with all fields and return success event:
        #   return ProgressEvent(status=OperationStatus.SUCCESS, resource_model=model)
        # - else
        #   return ProgressEvent(status=OperationStatus.IN_PROGRESS, resource_model=model)

        raise NotImplementedError

    def read(
        self,
        request: ResourceRequest[DynamoDBTableProperties],
    ) -> ProgressEvent[DynamoDBTableProperties]:
        """
        Fetch resource information

        IAM permissions required:
          - dynamodb:DescribeTable
          - dynamodb:DescribeContinuousBackups
          - dynamodb:DescribeContributorInsights
        """
        raise NotImplementedError

    def delete(
        self,
        request: ResourceRequest[DynamoDBTableProperties],
    ) -> ProgressEvent[DynamoDBTableProperties]:
        """
        Delete a resource

        IAM permissions required:
          - dynamodb:DeleteTable
          - dynamodb:DescribeTable
        """
        raise NotImplementedError

    def update(
        self,
        request: ResourceRequest[DynamoDBTableProperties],
    ) -> ProgressEvent[DynamoDBTableProperties]:
        """
        Update a resource

        IAM permissions required:
          - dynamodb:UpdateTable
          - dynamodb:DescribeTable
          - dynamodb:DescribeTimeToLive
          - dynamodb:UpdateTimeToLive
          - dynamodb:UpdateContinuousBackups
          - dynamodb:UpdateContributorInsights
          - dynamodb:DescribeContinuousBackups
          - dynamodb:DescribeKinesisStreamingDestination
          - dynamodb:ListTagsOfResource
          - dynamodb:TagResource
          - dynamodb:UntagResource
          - dynamodb:DescribeContributorInsights
          - dynamodb:EnableKinesisStreamingDestination
          - dynamodb:DisableKinesisStreamingDestination
          - kinesis:DescribeStream
          - kinesis:PutRecords
          - iam:CreateServiceLinkedRole
          - kms:CreateGrant
          - kms:Describe*
          - kms:Get*
          - kms:List*
          - kms:RevokeGrant
        """
        raise NotImplementedError


class DynamoDBTableProviderPlugin(CloudFormationResourceProviderPlugin):
    name = "AWS::DynamoDB::Table"

    def __init__(self):
        self.factory: Optional[Type[ResourceProvider]] = None

    def load(self):
        self.factory = DynamoDBTableProvider
