# LocalStack Resource Provider Scaffolding v2
from __future__ import annotations

from pathlib import Path
from typing import Optional, Type, TypedDict

import localstack.services.cloudformation.provider_utils as util
from localstack.services.cloudformation.resource_provider import (
    CloudFormationResourceProviderPlugin,
    OperationStatus,
    ProgressEvent,
    ResourceProvider,
    ResourceRequest,
)
from localstack.utils.strings import short_uid


class Route53HostedZoneProperties(TypedDict):
    HostedZoneConfig: Optional[HostedZoneConfig]
    HostedZoneTags: Optional[list[HostedZoneTag]]
    Id: Optional[str]
    Name: Optional[str]
    NameServers: Optional[list[str]]
    QueryLoggingConfig: Optional[QueryLoggingConfig]
    VPCs: Optional[list[VPC]]


class HostedZoneConfig(TypedDict):
    Comment: Optional[str]


class HostedZoneTag(TypedDict):
    Key: Optional[str]
    Value: Optional[str]


class QueryLoggingConfig(TypedDict):
    CloudWatchLogsLogGroupArn: Optional[str]


class VPC(TypedDict):
    VPCId: Optional[str]
    VPCRegion: Optional[str]


REPEATED_INVOCATION = "repeated_invocation"


class Route53HostedZoneProvider(ResourceProvider[Route53HostedZoneProperties]):

    TYPE = "AWS::Route53::HostedZone"  # Autogenerated. Don't change
    SCHEMA = util.get_schema_path(Path(__file__))  # Autogenerated. Don't change

    def create(
        self,
        request: ResourceRequest[Route53HostedZoneProperties],
    ) -> ProgressEvent[Route53HostedZoneProperties]:
        """
        Create a new resource.

        Primary identifier fields:
          - /properties/Id



        Create-only properties:
          - /properties/Name

        Read-only properties:
          - /properties/Id
          - /properties/NameServers

        IAM permissions required:
          - route53:CreateHostedZone
          - route53:CreateQueryLoggingConfig
          - route53:ChangeTagsForResource
          - route53:GetChange
          - route53:AssociateVPCWithHostedZone
          - ec2:DescribeVpcs

        """
        model = request.desired_state
        route53 = request.aws_client_factory.route53
        # TODO: validations

        create_zone = route53.create_hosted_zone(Name=model["Name"], CallerReference=short_uid())
        model["Id"] = create_zone["HostedZone"]["Id"]
        # TODO: defaults
        # TODO: idempotency
        request.custom_context[REPEATED_INVOCATION] = True
        return ProgressEvent(
            status=OperationStatus.SUCCESS,
            resource_model=model,
            custom_context=request.custom_context,
        )

    def read(
        self,
        request: ResourceRequest[Route53HostedZoneProperties],
    ) -> ProgressEvent[Route53HostedZoneProperties]:
        """
        Fetch resource information

        IAM permissions required:
          - route53:GetHostedZone
          - route53:ListTagsForResource
          - route53:ListQueryLoggingConfigs
        """
        raise NotImplementedError

    def delete(
        self,
        request: ResourceRequest[Route53HostedZoneProperties],
    ) -> ProgressEvent[Route53HostedZoneProperties]:
        """
        Delete a resource

        IAM permissions required:
          - route53:DeleteHostedZone
          - route53:DeleteQueryLoggingConfig
          - route53:ListQueryLoggingConfigs
          - route53:GetChange
        """
        model = request.desired_state
        route53 = request.aws_client_factory.route53
        route53.delete_hosted_zone(Id=model["Id"])
        return ProgressEvent(status=OperationStatus.SUCCESS, resource_model={})

    def update(
        self,
        request: ResourceRequest[Route53HostedZoneProperties],
    ) -> ProgressEvent[Route53HostedZoneProperties]:
        """
        Update a resource

        IAM permissions required:
          - route53:GetChange
          - route53:ListTagsForResource
          - route53:UpdateHostedZoneComment
          - route53:ChangeTagsForResource
          - route53:AssociateVPCWithHostedZone
          - route53:DisassociateVPCFromHostedZone
          - route53:CreateQueryLoggingConfig
          - route53:DeleteQueryLoggingConfig
          - ec2:DescribeVpcs
        """
        raise NotImplementedError


class Route53HostedZoneProviderPlugin(CloudFormationResourceProviderPlugin):
    name = "AWS::Route53::HostedZone"

    def __init__(self):
        self.factory: Optional[Type[ResourceProvider]] = None

    def load(self):
        self.factory = Route53HostedZoneProvider
