# LocalStack Resource Provider Scaffolding v2
from __future__ import annotations

from pathlib import Path
from typing import Optional, Type, TypedDict

import localstack.services.cloudformation.provider_utils as util
from localstack.services.cloudformation.resource_provider import (
    CloudFormationResourceProviderPlugin,
    OperationStatus,
    ProgressEvent,
    ResourceProvider,
    ResourceRequest,
)


class SchedulerScheduleProperties(TypedDict):
    FlexibleTimeWindow: Optional[FlexibleTimeWindow]
    ScheduleExpression: Optional[str]
    Target: Optional[Target]
    Arn: Optional[str]
    Description: Optional[str]
    EndDate: Optional[str]
    GroupName: Optional[str]
    KmsKeyArn: Optional[str]
    Name: Optional[str]
    ScheduleExpressionTimezone: Optional[str]
    StartDate: Optional[str]
    State: Optional[str]


class FlexibleTimeWindow(TypedDict):
    Mode: Optional[str]
    MaximumWindowInMinutes: Optional[float]


class DeadLetterConfig(TypedDict):
    Arn: Optional[str]


class RetryPolicy(TypedDict):
    MaximumEventAgeInSeconds: Optional[float]
    MaximumRetryAttempts: Optional[float]


class AwsVpcConfiguration(TypedDict):
    Subnets: Optional[list[str]]
    AssignPublicIp: Optional[str]
    SecurityGroups: Optional[list[str]]


class NetworkConfiguration(TypedDict):
    AwsvpcConfiguration: Optional[AwsVpcConfiguration]


class CapacityProviderStrategyItem(TypedDict):
    CapacityProvider: Optional[str]
    Base: Optional[float]
    Weight: Optional[float]


class PlacementConstraint(TypedDict):
    Expression: Optional[str]
    Type: Optional[str]


class PlacementStrategy(TypedDict):
    Field: Optional[str]
    Type: Optional[str]


class EcsParameters(TypedDict):
    TaskDefinitionArn: Optional[str]
    CapacityProviderStrategy: Optional[list[CapacityProviderStrategyItem]]
    EnableECSManagedTags: Optional[bool]
    EnableExecuteCommand: Optional[bool]
    Group: Optional[str]
    LaunchType: Optional[str]
    NetworkConfiguration: Optional[NetworkConfiguration]
    PlacementConstraints: Optional[list[PlacementConstraint]]
    PlacementStrategy: Optional[list[PlacementStrategy]]
    PlatformVersion: Optional[str]
    PropagateTags: Optional[str]
    ReferenceId: Optional[str]
    Tags: Optional[list[dict]]
    TaskCount: Optional[float]


class EventBridgeParameters(TypedDict):
    DetailType: Optional[str]
    Source: Optional[str]


class KinesisParameters(TypedDict):
    PartitionKey: Optional[str]


class SageMakerPipelineParameter(TypedDict):
    Name: Optional[str]
    Value: Optional[str]


class SageMakerPipelineParameters(TypedDict):
    PipelineParameterList: Optional[list[SageMakerPipelineParameter]]


class SqsParameters(TypedDict):
    MessageGroupId: Optional[str]


class Target(TypedDict):
    Arn: Optional[str]
    RoleArn: Optional[str]
    DeadLetterConfig: Optional[DeadLetterConfig]
    EcsParameters: Optional[EcsParameters]
    EventBridgeParameters: Optional[EventBridgeParameters]
    Input: Optional[str]
    KinesisParameters: Optional[KinesisParameters]
    RetryPolicy: Optional[RetryPolicy]
    SageMakerPipelineParameters: Optional[SageMakerPipelineParameters]
    SqsParameters: Optional[SqsParameters]


REPEATED_INVOCATION = "repeated_invocation"


class SchedulerScheduleProvider(ResourceProvider[SchedulerScheduleProperties]):

    TYPE = "AWS::Scheduler::Schedule"  # Autogenerated. Don't change
    SCHEMA = util.get_schema_path(Path(__file__))  # Autogenerated. Don't change

    def create(
        self,
        request: ResourceRequest[SchedulerScheduleProperties],
    ) -> ProgressEvent[SchedulerScheduleProperties]:
        """
        Create a new resource.

        Primary identifier fields:
          - /properties/Name

        Required properties:
          - FlexibleTimeWindow
          - ScheduleExpression
          - Target

        Create-only properties:
          - /properties/Name

        Read-only properties:
          - /properties/Arn

        IAM permissions required:
          - scheduler:CreateSchedule
          - scheduler:GetSchedule
          - iam:PassRole

        """
        model = request.desired_state

        # TODO: validations

        if not request.custom_context.get(REPEATED_INVOCATION):
            # this is the first time this callback is invoked
            # TODO: defaults
            # TODO: idempotency
            # TODO: actually create the resource
            request.custom_context[REPEATED_INVOCATION] = True
            return ProgressEvent(
                status=OperationStatus.IN_PROGRESS,
                resource_model=model,
                custom_context=request.custom_context,
            )

        # TODO: check the status of the resource
        # - if finished, update the model with all fields and return success event:
        #   return ProgressEvent(status=OperationStatus.SUCCESS, resource_model=model)
        # - else
        #   return ProgressEvent(status=OperationStatus.IN_PROGRESS, resource_model=model)

        raise NotImplementedError

    def read(
        self,
        request: ResourceRequest[SchedulerScheduleProperties],
    ) -> ProgressEvent[SchedulerScheduleProperties]:
        """
        Fetch resource information

        IAM permissions required:
          - scheduler:GetSchedule
        """
        raise NotImplementedError

    def delete(
        self,
        request: ResourceRequest[SchedulerScheduleProperties],
    ) -> ProgressEvent[SchedulerScheduleProperties]:
        """
        Delete a resource

        IAM permissions required:
          - scheduler:DeleteSchedule
          - scheduler:GetSchedule
        """
        raise NotImplementedError

    def update(
        self,
        request: ResourceRequest[SchedulerScheduleProperties],
    ) -> ProgressEvent[SchedulerScheduleProperties]:
        """
        Update a resource

        IAM permissions required:
          - scheduler:UpdateSchedule
          - scheduler:GetSchedule
          - iam:PassRole
        """
        raise NotImplementedError


class SchedulerScheduleProviderPlugin(CloudFormationResourceProviderPlugin):
    name = "AWS::Scheduler::Schedule"

    def __init__(self):
        self.factory: Optional[Type[ResourceProvider]] = None

    def load(self):
        self.factory = SchedulerScheduleProvider
